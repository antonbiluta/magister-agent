stages:
  - build
  - prepare
  - release

variables:
  BINARY_NAME: agent
  PACKAGE_NAME: "agent"
  GIT_STRATEGY: fetch

build:
  image: golang:1.23
  stage: build
  tags:
    - docker
  parallel:
    matrix:
      - GOOS: "linux"
        GOARCH: "amd64"
      - GOOS: "windows"
        GOARCH: "amd64"
  script:
    - export GOOS=$GOOS
    - export GOARCH=$GOARCH
    - mkdir -p build
    - echo "Building for $GOOS/$GOARCH"
    - CGO_ENABLED=0 GOOS=$GOOS GOARCH=$GOARCH go build -ldflags "-s -w" -o build/${BINARY_NAME}_${GOOS}_${GOARCH} main.go
    - ls -la build/
  artifacts:
    paths:
      - build/
    expire_in: 1d
  only:
    - tags

upload:
  stage: prepare
  tags:
    - docker
  only:
    - tags
  script:
    - apk add --no-cache jq git
    - mkdir -p tmp

    - echo --tag-name "$CI_COMMIT_TAG" --name "$CI_COMMIT_TAG" --description \""Release $CI_COMMIT_TAG"\" > tmp/args.txt

    - |
      for file in build/*; do
        FILENAME=$(basename "$file")
        FILE_URL="$CI_PROJECT_URL/-/packages/generic/$PACKAGE_NAME/$CI_COMMIT_TAG/$FILENAME"

        curl --fail --header "PRIVATE-TOKEN: $GITLAB_TOKEN" \
          --upload-file "$file" \
          "$CI_API_V4_URL/projects/$CI_PROJECT_ID/packages/generic/$PACKAGE_NAME/$CI_COMMIT_TAG/$FILENAME"
        
        echo --assets-link '{"name":"'"$FILENAME"'","url":"'"$FILE_URL"'"}' >> tmp/args.txt
      done
  artifacts:
    paths:
      - tmp/args.txt
    expire_in: 1h

release:
  image: registry.gitlab.com/gitlab-org/release-cli:latest
  stage: release
  tags:
    - docker
  only:
    - tags
  dependencies:
    - upload
  script:
    - ARGS=$(tr '\n' ' ' < tmp/args.txt)
    - echo "release-cli create $ARGS"
    - release-cli create $ARGS