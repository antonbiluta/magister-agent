stages:
  - build
  - release

variables:
  BINARY_NAME: agent
  PACKAGE_NAME: "agent"
  CHANGELOG_FILE: "tmp/changelog.txt"
  LINKS_JSON_FILE: "tmp/links.json"
  GIT_STRATEGY: fetch

build:
  image: golang:1.23
  stage: build
  tags:
    - docker
  parallel:
    matrix:
      - GOOS: "linux"
        GOARCH: "amd64"
      - GOOS: "windows"
        GOARCH: "amd64"
  script:
    - export GOOS=$GOOS
    - export GOARCH=$GOARCH
    - mkdir -p build
    - echo "Building for $GOOS/$GOARCH"
    - CGO_ENABLED=0 GOOS=$GOOS GOARCH=$GOARCH go build -ldflags "-s -w" -o build/${BINARY_NAME}_${GOOS}_${GOARCH} main.go
    - ls -la build/
  artifacts:
    paths:
      - build/
    expire_in: 1d
  only:
    - branches
    - tags

upload:
  stage: release
  tags:
    - docker
  only:
    - tags
  script:
    - apk add --no-cache jq git
    - mkdir -p tmp
    - echo "[]" > "$LINKS_JSON_FILE"

    - |
      for file in build/*; do
        FILENAME=$(basename "$file")
        FILE_URL="$CI_PROJECT_URL/-/packages/generic/$PACKAGE_NAME/$CI_COMMIT_TAG/$FILENAME"

        curl --fail --header "PRIVATE-TOKEN: $GITLAB_TOKEN" \
          --upload-file "$file" \
          "$CI_API_V4_URL/projects/$CI_PROJECT_ID/packages/generic/$PACKAGE_NAME/$CI_COMMIT_TAG/$FILENAME"

        jq \
          --arg name "$FILENAME" \
          --arg url "$FILE_URL" \
          '. += [{"name": $name, "url": $url}]' \
          "$LINKS_JSON_FILE" > tmp/tmp.json && mv tmp/tmp.json "$LINKS_JSON_FILE"
      done

    - |
      PREV_TAG=$(git describe --tags --abbrev=0 $(git rev-list --tags --skip=1 --max-count=1) 2>/dev/null || echo "")
      if [ -n "$PREV_TAG" ]; then
        git log "$PREV_TAG"..HEAD --pretty=format:"- %s" > "$CHANGELOG_FILE"
      else
        git log --pretty=format:"- %s" > "$CHANGELOG_FILE"
      fi
  artifacts:
    paths:
      - tmp/links.json
      - tmp/changelog.txt
    expire_in: 1h

release:
  image: registry.gitlab.com/gitlab-org/release-cli:latest
  stage: release
  tags:
    - docker
  only:
    - tags
  dependencies:
    - upload
  script:
    - export DESCRIPTION="$(cat tmp/changelog.txt)"

    - |
      set -- --tag-name "$CI_COMMIT_TAG" --name "$CI_COMMIT_TAG" --description "$DESCRIPTION"

      COUNT=$(jq length tmp/links.json)
      for i in $(seq 0 $((COUNT - 1))); do
        LINK=$(jq -c ".[$i]" tmp/links.json)
        set -- "$@" --assets-link "$LINK"
      done

      release-cli create "$@"