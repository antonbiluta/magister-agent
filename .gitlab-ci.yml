stages:
  - build
  - release

variables:
  BINARY_NAME: agent
  GIT_STRATEGY: fetch

build:
  image: golang:1.23
  stage: build
  tags:
    - docker
  parallel:
    matrix:
      - GOOS: "linux"
        GOARCH: "amd64"
      - GOOS: "windows"
        GOARCH: "amd64"
  script:
    - export GOOS=$GOOS
    - export GOARCH=$GOARCH
    - mkdir -p build
    - echo "Building for $GOOS/$GOARCH"
    - CGO_ENABLED=0 GOOS=$GOOS GOARCH=$GOARCH go build -ldflags "-s -w" -o build/${BINARY_NAME}_${GOOS}_${GOARCH} main.go
    - ls -la build/
  artifacts:
    paths:
      - build/
    expire_in: 1d
  only:
    - branches
    - tags

upload:
  stage: release
  tags:
    - docker
  only:
    - tags
  script:
    - apk add --no-cache jq
    - mkdir -p tmp
    - echo "[]" > "$LINKS_FILE"
    - |
      for file in build/*; do
        FILENAME=$(basename "$file")
        echo "Uploading $FILENAME..."

        curl --fail --header "JOB-TOKEN: $CI_JOB_TOKEN" \
          --upload-file "$file" \
          "$CI_API_V4_URL/projects/$CI_PROJECT_ID/packages/generic/$PACKAGE_NAME/$CI_COMMIT_TAG/$FILENAME"

        # Добавляем ссылку в JSON
        jq \
          --arg name "$FILENAME" \
          --arg url "$CI_PROJECT_URL/-/packages/generic/$PACKAGE_NAME/$CI_COMMIT_TAG/$FILENAME" \
          '. += [{"name": $name, "url": $url}]' \
          "$LINKS_FILE" > tmp/links.tmp.json && mv tmp/links.tmp.json "$LINKS_FILE"
      done
    - |
      jq -n \
        --arg tag "$CI_COMMIT_TAG" \
        --arg name "$CI_COMMIT_TAG" \
        --arg desc "$(awk "/^## $CI_COMMIT_TAG/{flag=1;next}/^## /{flag=0}flag" CHANGELOG.md | sed 's/"/\\"/g')" \
        --slurpfile links "$LINKS_FILE" \
        '{
          tag_name: $tag,
          name: $name,
          description: $desc,
          assets: {
            links: $links[0]
          }
        }' > "$FULL_RELEASE_JSON"
  artifacts:
    paths:
      - tmp/full-release.json
    expire_in: 1h

release:
  image: registry.gitlab.com/gitlab-org/release-cli:latest
  stage: release
  tags:
    - docker
  only:
    - tags
  dependencies:
    - upload
  script:
    - release-cli create --json tmp/full-release.json